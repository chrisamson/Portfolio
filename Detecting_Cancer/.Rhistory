pers <- data.frame(counts$AP_pertyp, counts$DP_pertyp, counts$GG_pertyp, counts$JV_pertyp, counts$JU0_pertyp, counts$JU1_pertyp)
colnames(pers) <- c('AP','DP','GG','JV','JU0','JU1')
means <- rowMeans(pers)
SDs <- rowSds(as.matrix(pers))
MIN <- rowMins(as.matrix(pers))
MAX <- rowMaxs(as.matrix(pers))
pers$Mean <- means
pers$Min <- MIN
pers$Max <- MAX
pers$SD <- SDs
pers$k <- c(19,20,21,22,23,24,25,26,27,28,29,30)
pers$TYPE <- 'Human Reads'
apers <- data.frame(counts$AP_peratyp, counts$DP_peratyp, counts$GG_peratyp, counts$JV_peratyp, counts$JU0_peratyp, counts$JU1_peratyp)
colnames(apers) <- c('AP','DP','GG','JV','JU0','JU1')
means <- rowMeans(apers)
SDs <- rowSds(as.matrix(apers))
MIN <- rowMins(as.matrix(apers))
MAX <- rowMaxs(as.matrix(apers))
apers$Mean <- means
apers$Min <- MIN
apers$Max <- MAX
apers$SD <- SDs
apers$k <- c(19,20,21,22,23,24,25,26,27,28,29,30)
apers$TYPE <- 'Non-Human Reads'
GRAPH <- rbind(pers, apers)
ggplot(GRAPH, aes(x=k, y=Mean, group=TYPE, colour=TYPE)) + geom_line(size = 1) + geom_point() + geom_errorbar(aes(ymin=Min, ymax=Max), width=0.5, size = 1, position=position_dodge(0.05)) + labs(x = 'Minimum Seed Length Value', y= 'Portion of Reads Still Aligning',colour='Read Type')
chrom_counts <- data.frame(c(1.003098751,0.9815668874,0.9748749889,0.9333375115,0.9561143252,0.9636702293,0.9587177822,0.9616385724,0.9698005385,1.032495269,1.010227753,1.002642525,0.9654941085,0.9905825576,1.005303377,0.8562101325,1.1400139,1.009892281,1.143947326,1.188720694,0.9190128799,1.206963057,1.617690427,0.4949045186),
c(0.9606387359,1.006613334,1.009835708,1.062139898,1.002384121,1.045383232,0.9931125009,1.007642941,0.9243305586,0.9879414797,0.9629393911,1.05063363,1.098979283,0.9445034884,0.9404242599,0.7441242945,0.8201269343,1.13888629,0.7337296528,0.8767403375,0.942543259,0.758845406,1.728509094,0.8244726),
c(0.954087059,1.02656393,0.9998466916,1.053719973,1.027390912,1.054418167,1.013617994,1.027663599,0.9454443607,0.9888168648,0.9901624158,1.032200335,1.208243028,1.004153708,0.9508135584,0.7826696107,0.8683329301,1.173377475,0.7905223113,0.9552659059,0.9231992151,0.8355692179,0.9076501508,21.16322722),
c(0.9368438638,1.063470231,1.00498652,1.138779116,1.025866039,1.02581547,0.9808395467,0.9943642981,0.9496088274,0.934975373,0.9289112832,0.9763065836,1.162011356,1.007323141,0.9050491722,0.708611768,0.7893782466,1.213974775,0.744866673,0.8503434118,0.908581106,0.7523815024,1.741292778,0.7214195471),
c(0.9423005061,1.015938954,1.028919582,1.081792587,1.027159397,1.0333573,0.9856890172,1.00999105,0.9034061748,0.9821602084,0.9747790254,1.001550097,1.114476365,0.98351712,0.9298120295,0.7629659627,0.8267826741,1.0829828,0.6868665511,0.897079077,0.9107842083,0.7427546682,1.770772091,0.6632121392),
c(0.9769356994,1.027888389,1.061427084,1.131864862,1.033551112,1.047292589,0.997830679,1.024395867,0.9299355296,0.9692262643,0.9661740834,1.013484569,1.151521849,0.968915538,0.9508643233,0.7650478035,0.8515171157,1.091348255,0.7274370126,0.9334063202,0.9253545526,0.7529626948,0.9292349948,16.51975221))
rownames(chrom_counts) <- c(1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24)
colnames(chrom_counts) <- c('JV','JU0','JU1','GG','DP','AP')
test <- data.frame(row = rownames(chrom_counts),
name = rep(colnames(chrom_counts), each = nrow(chrom_counts)),
value = unlist(chrom_counts) , row.names = NULL)
test$Chrom <- as.numeric(rownames(chrom_counts))
SDs <- rowSds(as.matrix(chrom_counts))
means <- rowMeans(chrom_counts)
chrom_counts$Mean <- means
chrom_counts$SD <- SDs
chrom_counts$Chrom <- factor(c('1','2','3','4','5','6','7','8','9','10','11','12','13','14','15','16','17','18','19','20','21','22','X','Y'), level = c('1','2','3','4','5','6','7','8','9','10','11','12','13','14','15','16','17','18','19','20','21','22','X','Y'))
ggplot(head(chrom_counts,-2), aes(x=Chrom, y=Mean)) + geom_line(size = 1) + ylim(0,1.3)+ geom_point() + geom_errorbar(aes(ymin=Mean-SD, ymax=Mean+SD), width=0.5, size = 1, position=position_dodge(0.05)) + labs(x = 'Chromosome', y= 'Normalised Non-human portion',colour='Sample')
ggplot(chrom_counts, aes(x=Chrom, y=Mean)) + geom_line(size = 1) + geom_point() + geom_errorbar(aes(ymin=Mean-SD, ymax=Mean+SD), width=0.5, size = 1, position=position_dodge(0.05)) + labs(x = 'Chromosome', y= 'Normalised Non-human portion',colour='Sample')
ggplot(test, aes(x=Chrom, y=value, colour = name)) + geom_line(size = 1) + geom_point() + labs(x = 'Chromosome', y= 'Normalised Non-human portion',colour='Sample')
chrom_counts <- data.frame(c(1.003098751,0.9815668874,0.9748749889,0.9333375115,0.9561143252,0.9636702293,0.9587177822,0.9616385724,0.9698005385,1.032495269,1.010227753,1.002642525,0.9654941085,0.9905825576,1.005303377,0.8562101325,1.1400139,1.009892281,1.143947326,1.188720694,0.9190128799,1.206963057,1.617690427,0.4949045186),
c(0.9606387359,1.006613334,1.009835708,1.062139898,1.002384121,1.045383232,0.9931125009,1.007642941,0.9243305586,0.9879414797,0.9629393911,1.05063363,1.098979283,0.9445034884,0.9404242599,0.7441242945,0.8201269343,1.13888629,0.7337296528,0.8767403375,0.942543259,0.758845406,1.728509094,0.8244726),
c(0.954087059,1.02656393,0.9998466916,1.053719973,1.027390912,1.054418167,1.013617994,1.027663599,0.9454443607,0.9888168648,0.9901624158,1.032200335,1.208243028,1.004153708,0.9508135584,0.7826696107,0.8683329301,1.173377475,0.7905223113,0.9552659059,0.9231992151,0.8355692179,0.9076501508,21.16322722),
c(0.9368438638,1.063470231,1.00498652,1.138779116,1.025866039,1.02581547,0.9808395467,0.9943642981,0.9496088274,0.934975373,0.9289112832,0.9763065836,1.162011356,1.007323141,0.9050491722,0.708611768,0.7893782466,1.213974775,0.744866673,0.8503434118,0.908581106,0.7523815024,1.741292778,0.7214195471),
c(0.9423005061,1.015938954,1.028919582,1.081792587,1.027159397,1.0333573,0.9856890172,1.00999105,0.9034061748,0.9821602084,0.9747790254,1.001550097,1.114476365,0.98351712,0.9298120295,0.7629659627,0.8267826741,1.0829828,0.6868665511,0.897079077,0.9107842083,0.7427546682,1.770772091,0.6632121392),
c(0.9769356994,1.027888389,1.061427084,1.131864862,1.033551112,1.047292589,0.997830679,1.024395867,0.9299355296,0.9692262643,0.9661740834,1.013484569,1.151521849,0.968915538,0.9508643233,0.7650478035,0.8515171157,1.091348255,0.7274370126,0.9334063202,0.9253545526,0.7529626948,0.9292349948,16.51975221))
rownames(chrom_counts) <- c(1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24)
colnames(chrom_counts) <- c('JV','JU0','JU1','GG','DP','AP')
test <- data.frame(row = rownames(chrom_counts),
name = rep(colnames(chrom_counts), each = nrow(chrom_counts)),
value = unlist(chrom_counts) , row.names = NULL)
test$Chrom <- as.numeric(rownames(chrom_counts))
SDs <- rowSds(as.matrix(chrom_counts))
MIN <- rowMins(as.matrix(chrom_counts))
MAX <- rowMaxs(as.matrix(chrom_counts))
means <- rowMeans(chrom_counts)
chrom_counts$Mean <- means
chrom_counts$Min <- MIN
chrom_counts$Max <- MAX
chrom_counts$SD <- SDs
chrom_counts$Chrom <- factor(c('1','2','3','4','5','6','7','8','9','10','11','12','13','14','15','16','17','18','19','20','21','22','X','Y'), level = c('1','2','3','4','5','6','7','8','9','10','11','12','13','14','15','16','17','18','19','20','21','22','X','Y'))
#ggplot(head(chrom_counts,-2), aes(x=Chrom, y=Mean)) + geom_line(size = 1) + ylim(0,1.3)+ geom_point() + geom_errorbar(aes(ymin=Mean-SD, ymax=Mean+SD), width=0.5, size = 1, position=position_dodge(0.05)) + labs(x = 'Chromosome', y= 'Normalised Non-human portion',colour='Sample')
ggplot(head(chrom_counts,-2), aes(x=Chrom, y=Mean)) + geom_line(size = 1) + ylim(0,1.3)+ geom_point() + geom_errorbar(aes(ymin=Min, ymax=Max), width=0.5, size = 1, position=position_dodge(0.05)) + labs(x = 'Chromosome', y= 'Normalised Non-human portion',colour='Sample')
install.packages("GEOquery")
install.packages("GEOquery")
library(GEOquery)
#library(limma)
library(umap)
install.packages("umap")
library(limma)
#Load data from local file (due to appatant server error causing timeout)
#Note: Process is incedibly long and uses large (>20GB) ammounts of RAM
DATA <- getGEO(filename = "C:/Users/chris/Downloads/Single Cell/GSE46706_family.soft", GSEMatrix = TRUE)
gc()
Table(DATA)[1:5,]
Columns(DATA)[1:5,]
gsmlist = Filter(function(gsm) {Meta(gsm)$platform_id=='GPL96'},GSMList(gse))
gsmplatforms <- lapply(GSMList(DATA),function(x) {Meta(x)$platform_id})
gsmlist = Filter(function(DATA) {Meta(DATA)$platform_id=='GPL5175'},GSMList(DATA))
probesets <- Table(GPLList(gsmlist)[[1]])$ID
Table(gsmlist)[1:5,]
table(gsmlist)[1:5,]
gsmlist$GSM1490161
gsmlist$GSM1490162
gsmplatforms <- unique(lapply(GSMList(DATA),function(x) {Meta(x)$platform_id}))
Columns(gsmlist$GSM1490162)
Table(gsmlist$GSM1490162)[1:5,]
Columns(gsmlist$GSM1490162)[1:5,]
probesets <- Table(GPLList(gsmlist)[[1]])$ID
probesets <- Table(GPLList(DATA)[[1]])$ID
data.matrix <- do.call('cbind',lapply(gsmlist,function(x)
{tab <- Table(x)
mymatch <- match(probesets,tab$ID_REF)
return(tab$VALUE[mymatch])
}))
data.matrix <- apply(data.matrix,2,function(x) {as.numeric(as.character(x))})
data.matrix[1:5,]
rm(data.matrix)
Columns(gsmlist$GSM1490162)@dataTable
gsmlist$GSM1490162@dataTable
gsmlist$GSM1490162@dataTable@table
gsmlist$GSM1490162@dataTable@columns
gsmlist$GSM1490162@header$characteristics_ch1
gsmplatforms
rm(gsmlist)
GENE = Filter(function(DATA) {Meta(DATA)$platform_id=='GPL5175'},GSMList(DATA))
gsmlist$GENE@dataTable@columns
GENE$GSM1490162@dataTable@columns
Columns(GENE)
length(GENE)
Table(GENE)
names(GENE)
for (name in names(GENE)){
print(len(GENE$`name`@header))
}
for (name in names(GENE)){
print(GENE$`name`@header)
}
fun <- function(x){
print(x@header)
return(1)
}
apply(GENE,2,fun)
fun <- function(x){
print(x)
return(1)
}
apply(GENE,2,fun)
pData(GENE)
names(GENE)
names(GENE)[[1]]
GENE[[1]]
for (x in range(0:length(names(GENE)))){
print(x)
}
for (x in 0:length(names(GENE))){
print(x)
}
length(names(GENE)
)
for (x in 0:10){#length(names(GENE))){
print(x)
}
GENE_TABLE <- data.frame()
for (x in 1:1){#length(names(GENE))){
GENE_TABLE <- rbind(GENE_TABLE,GENE[[x]]@dataTable@table)
}
GENE_TABLE <- t(GENE_TABLE)
GENE_TABLE <- data.frame()
for (x in 1:1){#length(names(GENE))){
)
GENE_TABLE <- data.frame()
for (x in 1:1){#length(names(GENE))){
GENE_TABLE <- rbind(data.frame(row.names = GENE_TABLE,GENE[[x]]@dataTable@table$ID_REF, values = GENE_TABLE,GENE[[x]]@dataTable@table$VALUE))
}
GENE_TABLE <- data.frame()
for (x in 1:1){#length(names(GENE))){
GENE_TABLE <- rbind(data.frame(row.names = GENE[[x]]@dataTable@table$ID_REF, values = GENE_TABLE,GENE[[x]]@dataTable@table$VALUE))
}
GENE_TABLE <- data.frame()
for (x in 1:1){#length(names(GENE))){
GENE_TABLE <- rbind(GENE_TABLE,data.frame(row.names = GENE[[x]]@dataTable@table$ID_REF, values = GENE[[x]]@dataTable@table$VALUE))
}
View(GENE_TABLE)
GENE_TABLE <- data.frame()
for (x in 1:1){#length(names(GENE))){
GENE_TABLE <- rbind(GENE_TABLE,data.frame(row.names = GENE[[x]]@dataTable@table$ID_REF, names(GENE)[[1]] = GENE[[x]]@dataTable@table$VALUE))
GENE_TABLE <- data.frame()
for (x in 1:1){#length(names(GENE))){
GENE_TABLE <- rbind(GENE_TABLE,data.frame(row.names = GENE[[x]]@dataTable@table$ID_REF, `names(GENE)[[1]]` = GENE[[x]]@dataTable@table$VALUE))
}
GENE_TABLE <- data.frame()
for (x in 1:1){#length(names(GENE))){
GENE_TABLE <- rbind(GENE_TABLE,data.frame(row.names = GENE[[x]]@dataTable@table$ID_REF, `$names(GENE)[[1]]` = GENE[[x]]@dataTable@table$VALUE))
}
GENE_TABLE <- data.frame()
for (x in 1:1){#length(names(GENE))){
tmp <- t(data.frame(row.names = GENE[[x]]@dataTable@table$ID_REF, values = GENE[[x]]@dataTable@table$VALUE))
GENE_TABLE <- rbind(GENE_TABLE,cbind('A',tmp))
}
GENE_TABLE <- t(GENE_TABLE)
GENE_TABLE <- data.frame()
GENE_TABLE <- data.frame()
for (x in 1:1){#length(names(GENE))){
tmp <- t(data.frame(row.names = GENE[[x]]@dataTable@table$ID_REF, values = GENE[[x]]@dataTable@table$VALUE))
GENE_TABLE <- rbind(GENE_TABLE,tmp)
}
GENE_TABLE <- data.frame()
for (x in 1:1){#length(names(GENE))){
tmp <- as.data.frame(t(data.frame(row.names = GENE[[x]]@dataTable@table$ID_REF, values = GENE[[x]]@dataTable@table$VALUE)))
GENE_TABLE <- rbind(GENE_TABLE,tmp)
}
GENE_TABLE <- data.frame()
for (x in 1:1){#length(names(GENE))){
tmp <- as.data.frame(t(data.frame(row.names = GENE[[x]]@dataTable@table$ID_REF, values = GENE[[x]]@dataTable@table$VALUE)))
GENE_TABLE <- rbind(GENE_TABLE,cbind('A',tmp))
}
for (x in 1:1){#length(names(GENE))){
tmp <- as.data.frame(t(data.frame(row.names = GENE[[x]]@dataTable@table$ID_REF, values = GENE[[x]]@dataTable@table$VALUE)))
GENE_TABLE <- rbind(GENE_TABLE,cbind(data.frame(name = 'A'),tmp))
}
for (x in 1:1){#length(names(GENE))){
tmp <- as.data.frame(t(data.frame(row.names = GENE[[x]]@dataTable@table$ID_REF, values = GENE[[x]]@dataTable@table$VALUE)))
GENE_TABLE <- rbind(GENE_TABLE,cbind(data.frame(name = names(GENE)[[1]]),tmp))
}
GENE_TABLE <- data.frame()
for (x in 1:1){#length(names(GENE))){
tmp <- as.data.frame(t(data.frame(row.names = GENE[[x]]@dataTable@table$ID_REF, values = GENE[[x]]@dataTable@table$VALUE)))
GENE_TABLE <- rbind(GENE_TABLE,cbind(data.frame(name = names(GENE)[[1]], description = GENE[[X]]@header$characteristics_ch1),tmp))
}
GENE_TABLE <- data.frame()
for (x in 1:1){#length(names(GENE))){
tmp <- as.data.frame(t(data.frame(row.names = GENE[[x]]@dataTable@table$ID_REF, values = GENE[[x]]@dataTable@table$VALUE)))
GENE_TABLE <- rbind(GENE_TABLE,cbind(data.frame(name = names(GENE)[[1]], description = GENE[[x]]@header$characteristics_ch1),tmp))
}
GENE_TABLE <- data.frame()
GENE_TABLE <- data.frame()
for (x in 1:1){#length(names(GENE))){
info <- data.frame(GENE[[x]]@header$characteristics_ch1)
#table <- as.data.frame(t(data.frame(row.names = GENE[[x]]@dataTable@table$ID_REF, values = GENE[[x]]@dataTable@table$VALUE)))
#GENE_TABLE <- rbind(GENE_TABLE,cbind(data.frame(name = names(GENE)[[1]], description = GENE[[x]]@header$characteristics_ch1),table))
GENE_TABLE <- rbind(GENE_TABLE,info)
}
library(tidyr)
GENE_TABLE <- data.frame()
for (x in 1:1){#length(names(GENE))){
info <- data.frame(X = GENE[[x]]@header$characteristics_ch1)
info <- info %>% separate(X, c(A,B), sep = ':')
#table <- as.data.frame(t(data.frame(row.names = GENE[[x]]@dataTable@table$ID_REF, values = GENE[[x]]@dataTable@table$VALUE)))
#GENE_TABLE <- rbind(GENE_TABLE,cbind(data.frame(name = names(GENE)[[1]], description = GENE[[x]]@header$characteristics_ch1),table))
GENE_TABLE <- rbind(GENE_TABLE,info)
}
GENE_TABLE <- data.frame()
for (x in 1:1){#length(names(GENE))){
info <- data.frame(X = GENE[[x]]@header$characteristics_ch1)
info <- info %>% separate(X, names = c(A,B), sep = ':')
#table <- as.data.frame(t(data.frame(row.names = GENE[[x]]@dataTable@table$ID_REF, values = GENE[[x]]@dataTable@table$VALUE)))
#GENE_TABLE <- rbind(GENE_TABLE,cbind(data.frame(name = names(GENE)[[1]], description = GENE[[x]]@header$characteristics_ch1),table))
GENE_TABLE <- rbind(GENE_TABLE,info)
}
GENE_TABLE <- data.frame()
for (x in 1:1){#length(names(GENE))){
info <- data.frame(X = GENE[[x]]@header$characteristics_ch1)
info <- info %>% separate(X, into = c(A,B), sep = ':')
#table <- as.data.frame(t(data.frame(row.names = GENE[[x]]@dataTable@table$ID_REF, values = GENE[[x]]@dataTable@table$VALUE)))
#GENE_TABLE <- rbind(GENE_TABLE,cbind(data.frame(name = names(GENE)[[1]], description = GENE[[x]]@header$characteristics_ch1),table))
GENE_TABLE <- rbind(GENE_TABLE,info)
}
GENE_TABLE <- data.frame()
for (x in 1:1){#length(names(GENE))){
info <- data.frame(X = GENE[[x]]@header$characteristics_ch1)
info <- info %>% separate(X, into = c('A','B'), sep = ':')
#table <- as.data.frame(t(data.frame(row.names = GENE[[x]]@dataTable@table$ID_REF, values = GENE[[x]]@dataTable@table$VALUE)))
#GENE_TABLE <- rbind(GENE_TABLE,cbind(data.frame(name = names(GENE)[[1]], description = GENE[[x]]@header$characteristics_ch1),table))
GENE_TABLE <- rbind(GENE_TABLE,info)
}
library(GEOquery)
library(limma)
library(umap)
library(tidyr)
library(stringr)
library(RSQLite)
#Note: can also be (theoretically due to aformentioned issues) retrieved using
DATA <- getGEO(GPL20301, GSEMatrix = TRUE)
#Note: can also be (theoretically due to aformentioned issues) retrieved using
DATA <- getGEO(GSE103322, GSEMatrix = TRUE)
#Note: can also be (theoretically due to aformentioned issues) retrieved using
DATA <- getGEO("GSE103322", GSEMatrix = TRUE)
View(DATA)
#Note: can also be (theoretically due to aformentioned issues) retrieved using
DATA <- getGEO("GSE146264", GSEMatrix = TRUE)
#Identify the platforms present in the data set
gsmplatforms <- unique(lapply(GSMList(DATA),function(x) {Meta(x)$platform_id}))
gsmplatforms
#Identify the platforms present in the data set
gsmplatforms <- unique(lapply(GSMList(DATA),function(x) {Meta(x)$platform_id}))
#Note: can also be (theoretically due to aformentioned issues) retrieved using
DATA <- getGEO("GSE92776", GSEMatrix = TRUE)
#Identify the platforms present in the data set
gsmplatforms <- unique(lapply(GSMList(DATA),function(x) {Meta(x)$platform_id}))
#Identify the platforms present in the data set
DATA$GSE92776_series_matrix.txt.gz
#Identify the platforms present in the data set
Meta(DATA)
#Identify the platforms present in the data set
DATA[[1]]
#Identify the platforms present in the data set
DATA[[2]]
#Note: can also be (theoretically due to aformentioned issues) retrieved using
DATA <- getGEO("GSE92776")#, GSEMatrix = TRUE)
#Identify the platforms present in the data set
gsmplatforms <- unique(lapply(GSMList(DATA),function(x) {Meta(x)$platform_id}))
GSMList(DATA)
Filter(DATA)
head(DATA$GSE92776_series_matrix.txt.gz@phenoData@data)
#Note: can also be (theoretically due to aformentioned issues) retrieved using
DATA <- getGEO("GSE146264", GSEMatrix = TRUE)
#Note: can also be (theoretically due to aformentioned issues) retrieved using
DATA <- getGEO("GPL22843", GSEMatrix = TRUE)
#Note: can also be (theoretically due to aformentioned issues) retrieved using
DATA <- getGEO("GSM2437228", GSEMatrix = TRUE)
#Note: can also be (theoretically due to aformentioned issues) retrieved using
DATA <- getGEO("GSM4369180", GSEMatrix = TRUE)
#Note: can also be (theoretically due to aformentioned issues) retrieved using
DATA <- getGEO("GSM2575578", GSEMatrix = TRUE)
#Note: can also be (theoretically due to aformentioned issues) retrieved using
DATA <- getGEO("GSM4067570", GSEMatrix = TRUE)
#Note: can also be (theoretically due to aformentioned issues) retrieved using
DATA <- getGEO("GSE137140", GSEMatrix = TRUE)
#Identify the platforms present in the data set
gsmplatforms <- unique(lapply(GSMList(DATA),function(x) {Meta(x)$platform_id}))
for (sample in DATA$GSE137140_series_matrix.txt.gz@experimentData@samples){
print(sample)
}
for (sample in DATA$GSE137140_series_matrix.txt.gz@phenoData@data$geo_accession){
print(sample)
}
sample_data <- getGE('GSM4071493', GSEMatrix = TRUE)
sample_data <- getGEO('GSM4071493', GSEMatrix = TRUE)
tmp <- sample_data@dataTable@table
tmp <- as.data.frame(t(sample_data@dataTable@table))
tmp <- sample_data@header$characteristics_ch1
tmp <- as.data.frame(sample_data@header$characteristics_ch1)
View(tmp)
tmp <- data.frame(X = sample_data@header$characteristics_ch1) %>% separate(X, into = c('A','B'), sep = ': ')
View(tmp)
info <- data.frame(X = sample_data@header$characteristics_ch1) %>% separate(X, into = c('A','B'), sep = ': ')
tmp <- as.data.frame(t(rbind(data.frame(row.names = c('sample_id'), values = c(sample)),
data.frame(row.names = str_replace_all(gsub(r"{\s*\([^\)]+\)}","",info$A), ' ','_'), values = info$B),
data.frame(row.names = sample_data@dataTable@table$ID_REF, values = sample_data@dataTable@table$VALUE))))
samples <- DATA$GSE137140_series_matrix.txt.gz@phenoData@data$geo_accession
print(samples[x])
TABLE <- data.frame()
samples <- DATA$GSE137140_series_matrix.txt.gz@phenoData@data$geo_accession
for (x in 1:length(samples)){
print(samples[x])
#sample_data <- getGEO(sample, GSEMatrix = TRUE)
#info <- data.frame(X = sample_data@header$characteristics_ch1) %>% separate(X, into = c('A','B'), sep = ': ')
#tmp <- as.data.frame(t(rbind(data.frame(row.names = c('sample_id'), values = c(sample)),
#                             data.frame(row.names = str_replace_all(gsub(r"{\s*\([^\)]+\)}","",info$A), ' ','_'), values = info$B),
#                             data.frame(row.names = sample_data@dataTable@table$ID_REF, values = sample_data@dataTable@table$VALUE))))
#rm(info)
#TABLE[nrow(TABLE)]
}
TABLE <- data.frame()
samples <- DATA$GSE137140_series_matrix.txt.gz@phenoData@data$geo_accession
for (x in 1:length(samples)){
sample_data <- getGEO(samples[x], GSEMatrix = TRUE)
info <- data.frame(X = sample_data@header$characteristics_ch1) %>% separate(X, into = c('A','B'), sep = ': ')
tmp <- as.data.frame(t(rbind(data.frame(row.names = c('sample_id'), values = c(samples[x])),
data.frame(row.names = str_replace_all(gsub(r"{\s*\([^\)]+\)}","",info$A), ' ','_'), values = info$B),
data.frame(row.names = sample_data@dataTable@table$ID_REF, values = sample_data@dataTable@table$VALUE))))
rm(info)
TABLE[x,] = tmp
}
View(TABLE)
TABLE <- data.frame()
samples <- DATA$GSE137140_series_matrix.txt.gz@phenoData@data$geo_accession
for (x in 1:length(samples)){
print(samples[x])
sample_data <- getGEO(samples[x], GSEMatrix = TRUE)
info <- data.frame(X = sample_data@header$characteristics_ch1) %>% separate(X, into = c('A','B'), sep = ': ')
tmp <- as.data.frame(t(rbind(data.frame(row.names = c('sample_id'), values = c(samples[x])),
data.frame(row.names = str_replace_all(gsub(r"{\s*\([^\)]+\)}","",info$A), ' ','_'), values = info$B),
data.frame(row.names = sample_data@dataTable@table$ID_REF, values = sample_data@dataTable@table$VALUE))))
rm(info)
TABLE[x,] = tmp
rm(tmp)
}
for (x in 1:length(samples)){
print(samples[x])
sample_data <- getGEO(samples[x], GSEMatrix = TRUE)
info <- data.frame(X = sample_data@header$characteristics_ch1) %>% separate(X, into = c('A','B'), sep = ': ')
tmp <- as.data.frame(t(rbind(data.frame(row.names = c('sample_id'), values = c(samples[x])),
data.frame(row.names = str_replace_all(gsub(r"{\s*\([^\)]+\)}","",info$A), ' ','_'), values = info$B),
data.frame(row.names = sample_data@dataTable@table$ID_REF, values = sample_data@dataTable@table$VALUE))))
rm(info)
TABLE[x,] = tmp
#rm(tmp)
}
print(tmp)
print(tmp[[1]])
print(tmp[1,)
print(tmp[1,])
print(tmp[2,])
View(tmp)
print(tmp[,1])
print(as.list(tmp))
#Get data for each sample
TABLE <- data.frame()
for (x in 1:length(samples)){
print(samples[x])
sample_data <- getGEO(samples[x], GSEMatrix = TRUE)
info <- data.frame(X = sample_data@header$characteristics_ch1) %>% separate(X, into = c('A','B'), sep = ': ')
tmp <- as.data.frame(t(rbind(data.frame(row.names = c('sample_id'), values = c(samples[x])),
data.frame(row.names = str_replace_all(gsub(r"{\s*\([^\)]+\)}","",info$A), ' ','_'), values = info$B),
data.frame(row.names = sample_data@dataTable@table$ID_REF, values = sample_data@dataTable@table$VALUE))))
rm(info)
TABLE[x,] = tmp
if (x == 1){
TABLE <- tmp
}else{
TABLE[x,] = as.list(tmp)
}
#rm(tmp)
}
View(TABLE)
#Get data for each sample
TABLE <- data.frame()
for (x in 1:length(samples)){
print(samples[x])
sample_data <- getGEO(samples[x], GSEMatrix = TRUE)
info <- data.frame(X = sample_data@header$characteristics_ch1) %>% separate(X, into = c('A','B'), sep = ': ')
tmp <- as.data.frame(t(rbind(data.frame(row.names = c('sample_id'), values = c(samples[x])),
data.frame(row.names = str_replace_all(gsub(r"{\s*\([^\)]+\)}","",info$A), ' ','_'), values = info$B),
data.frame(row.names = sample_data@dataTable@table$ID_REF, values = sample_data@dataTable@table$VALUE))))
rm(info)
TABLE[x,] = tmp
if (x == 1){
TABLE <- tmp
}else{
TABLE[x,] = tmp #as.list(tmp)
}
#rm(tmp)
}
View(TABLE)
#Get data for each sample
TABLE <- data.frame()
for (x in 1:length(samples)){
print(samples[x])
sample_data <- getGEO(samples[x], GSEMatrix = TRUE)
info <- data.frame(X = sample_data@header$characteristics_ch1) %>% separate(X, into = c('A','B'), sep = ': ')
tmp <- as.data.frame(t(rbind(data.frame(row.names = c('sample_id'), values = c(samples[x])),
data.frame(row.names = str_replace_all(gsub(r"{\s*\([^\)]+\)}","",info$A), ' ','_'), values = info$B),
data.frame(row.names = sample_data@dataTable@table$ID_REF, values = sample_data@dataTable@table$VALUE))))
rm(info)
TABLE[x,] = tmp
if (x == 1){
TABLE <- tmp
}else{
TABLE[x,] = tmp
}
rm(tmp)
}
row.names(TALBLE) <- NULL
row.names(TABLE) <- NULL
#Connect to SQLite database
#Note: due to the size of this table in an ideal situation this data would be
#stored in a SQL database other than SQLite, however SQLite was used due to the
#ease of reproducibility of this project
con <- dbConnect(RSQLite::SQLite(), "Lung_Cancer_miRNA_DB.sqlite")
#Table Part A
dbWriteTable(con, "miRNA_Table_A" ,GENE_TABLE[,1:2000])
#Table Part A
dbWriteTable(con, "miRNA_Table_A" ,TABLE[,1:2000])
#Table Part B
dbWriteTable(con, "miRNA_Table_B" ,cbind(TABLE[,1],TABLE[,2001:2570]))
dbDisconnect(con)
#Connect to SQLite database
#Note: due to the size of this table in an ideal situation this data would be
#stored in a SQL database other than SQLite, however SQLite was used due to the
#ease of reproducibility of this project
con <- dbConnect(RSQLite::SQLite(), "Lung_Cancer_miRNA_DB.sqlite")
#Table Part B
dbWriteTable(con, "miRNA_Table_B" ,cbind(TABLE$sample_id,TABLE[,2001:2570]),overwrite =TRUE)
#Table Part B
dbWriteTable(con, "miRNA_Table_B" ,cbind(sample_id = TABLE$sample_id,TABLE[,2001:2570]),overwrite =TRUE)
#Table Part B
head(cbind(sample_id = TABLE$sample_id,TABLE[,2001:2570]))
#Table Part B
dbWriteTable(con, "miRNA_Table_C" ,cbind(sample_id = TABLE$sample_id,TABLE[,2001:2570]),overwrite =TRUE)
#Table Part A
dbWriteTable(con, "miRNA_Table_A" ,TABLE[,1:2000])
#Table Part B
dbWriteTable(con, "miRNA_Table_C" ,cbind(sample_id = TABLE$sample_id,TABLE[,2001:2570]),overwrite =TRUE)
#Connect to SQLite database
#Note: due to the size of this table in an ideal situation this data would be
#stored in a SQL database other than SQLite, however SQLite was used due to the
#ease of reproducibility of this project
con <- dbConnect(RSQLite::SQLite(), "C:\\Users\\chris\\Downloads\\Portfolio\\Detecting_Cancer")
#Connect to SQLite database
#Note: due to the size of this table in an ideal situation this data would be
#stored in a SQL database other than SQLite, however SQLite was used due to the
#ease of reproducibility of this project
con <- dbConnect(RSQLite::SQLite(), "C:\Users\chris\Downloads\Portfolio\Detecting_Cancer\Lung_Cancer_miRNA_DB.sqlite")
#Connect to SQLite database
#Note: due to the size of this table in an ideal situation this data would be
#stored in a SQL database other than SQLite, however SQLite was used due to the
#ease of reproducibility of this project
con <- dbConnect(RSQLite::SQLite(), "C:/Users/chris/Downloads/Portfolio/Detecting_Cancer/Lung_Cancer_miRNA_DB.sqlite")
#Table Part B
dbWriteTable(con, "miRNA_Table_B" ,cbind(sample_id = TABLE$sample_id,TABLE[,2001:2570]),overwrite =TRUE)
wd()
printwd()
getwd()
setwd('C:\Users\chris\Downloads\Portfolio')
setwd('C:/Users/chris/Downloads/Portfolio/Detecting_Cancer')
#Connect to SQLite database
#Note: due to the size of this table in an ideal situation this data would be
#stored in a SQL database other than SQLite, however SQLite was used due to the
#ease of reproducibility of this project
con <- dbConnect(RSQLite::SQLite(), "../Databases/Lung_Cancer_miRNA_DB.sqlite")
#Table Part A
dbWriteTable(con, "miRNA_Table_A" ,TABLE[,1:2000])
#Table Part B
dbWriteTable(con, "miRNA_Table_B" ,cbind(sample_id = TABLE$sample_id,TABLE[,2001:2570]))
